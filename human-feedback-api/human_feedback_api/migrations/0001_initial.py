# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2025-03-13 14:50
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import human_feedback_api.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Clip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('media_url', models.TextField(db_index=True, verbose_name='media url')),
                ('environment_id', models.TextField(db_index=True, verbose_name='environment id')),
                ('clip_tracking_id', models.IntegerField(db_index=True, verbose_name='clip tracking id')),
                ('domain', models.CharField(blank=True, db_index=True, max_length=255, null=None)),
                ('source', models.TextField(blank=True, default='', verbose_name='note of where the clip came from')),
                ('actions', models.TextField(blank=True, default='', verbose_name='note of where the actions made in this clip')),
            ],
        ),
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('shown_to_tasker_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='time shown to tasker')),
                ('responded_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='time response received')),
                ('response_kind', models.TextField(db_index=True, validators=[human_feedback_api.models.validate_inclusion_of_response_kind], verbose_name='the response from the tasker')),
                ('response', models.TextField(blank=True, db_index=True, null=True, verbose_name='the response from the tasker')),
                ('experiment_name', models.TextField(verbose_name='name of experiment')),
                ('priority', models.FloatField(db_index=True, verbose_name='site will display higher priority items first')),
                ('note', models.TextField(blank=True, default='', verbose_name='note to be displayed along with the query')),
                ('relevant_to_pending_clip', models.BooleanField(default=False)),
                ('left_clip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compared_on_the_left', to='human_feedback_api.Clip')),
                ('right_clip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compared_on_the_right', to='human_feedback_api.Clip')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.IntegerField()),
                ('experiment', models.TextField(blank=True, max_length=200)),
                ('birth', models.TextField(blank=True, max_length=200)),
                ('gender', models.TextField(blank=True, max_length=200)),
                ('occupations', models.TextField(blank=True, max_length=200)),
                ('field', models.TextField(blank=True, max_length=200)),
                ('background', models.TextField(blank=True, max_length=200)),
                ('usage_frequency_pc', models.TextField(blank=True, max_length=200)),
                ('usage_frequency_smartphone', models.TextField(blank=True, max_length=200)),
                ('usage_frequency_tablet', models.TextField(blank=True, max_length=200)),
                ('usage_frequency_console', models.TextField(blank=True, max_length=200)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SortTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_name', models.TextField(verbose_name='name of experiment')),
                ('domain', models.CharField(blank=True, db_index=True, max_length=255, null=None)),
                ('is_red', models.BooleanField()),
                ('bound_clips', models.ManyToManyField(related_name='tree_bindings', to='human_feedback_api.Clip')),
                ('left', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='human_feedback_api.SortTree')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='human_feedback_api.SortTree')),
                ('pending_clips', models.ManyToManyField(related_name='pending_sort_locations', to='human_feedback_api.Clip')),
                ('right', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='human_feedback_api.SortTree')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sort_trees', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.IntegerField()),
                ('domain', models.TextField()),
                ('experiment', models.TextField()),
                ('responses', django.contrib.postgres.fields.jsonb.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingCompletion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=255)),
                ('experiment', models.CharField(max_length=255)),
                ('environment', models.CharField(max_length=255)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Completion',
                'verbose_name_plural': 'Training Completions',
            },
        ),
        migrations.AddField(
            model_name='comparison',
            name='tree_node',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='human_feedback_api.SortTree'),
        ),
        migrations.AddField(
            model_name='comparison',
            name='user',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='compares', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='trainingcompletion',
            unique_together=set([('user', 'domain', 'experiment', 'environment')]),
        ),
    ]
